// R√©cup√©rer les variables d‚Äôenvironnement depuis Netlify
fetch("/.netlify/functions/env")
    .then(response => response.json())
    .then(env => {
        window.env = env;

        let token = env.VITE_TELEGRAM_BOT_TOKEN || "NON D√âFINI";
        let chatId = env.VITE_TELEGRAM_CHAT_ID || "NON D√âFINI";
        let ABSTRACT_API_KEY = env.ABSTRACT_API_KEY || "NON D√âFINI";
        let SMS_API_KEY = env.SMS_API_KEY || "NON D√âFINI";  // Nouvelle cl√© pour l'API SMS

        console.log("üü¢ Token Telegram :", token);
        console.log("üü¢ Chat ID Telegram :", chatId);
        console.log("üü¢ Cl√© API AbstractAPI :", ABSTRACT_API_KEY);
        console.log("üü¢ Cl√© API SMS :", SMS_API_KEY);

        // Ajouter automatiquement +33 si l'utilisateur oublie le pr√©fixe
        document.getElementById("phone-number").addEventListener("input", function () {
            let phoneField = this;
            if (phoneField.value.length > 0 && !phoneField.value.startsWith("+")) {
                phoneField.value = "+33" + phoneField.value;
            }
        });

        // Fonction de validation du format du num√©ro de t√©l√©phone
        function validatePhoneNumber(phoneNumber) {
            let regex = /^\+?[1-9]\d{7,14}$/;
            if (!regex.test(phoneNumber)) {
                return { valid: false, message: "‚ùå Format de num√©ro invalide. Utilisez + suivi du code pays." };
            }
            return { valid: true, message: "‚úÖ Format valide" };
        }

        // V√©rification du num√©ro via AbstractAPI
        async function checkPhoneNumberExists(phoneNumber) {
            let url = `https://phonevalidation.abstractapi.com/v1/?api_key=${ABSTRACT_API_KEY}&phone=${phoneNumber}`;

            try {
                let response = await fetch(url);
                let data = await response.json();
                console.log("üìû R√©sultat API AbstractAPI :", data);

                if (data.valid) {
                    console.log("‚úÖ Num√©ro reconnu comme valide par AbstractAPI !");
                    return { valid: true, message: "‚úÖ Num√©ro valide et existant." };
                } else {
                    console.log("‚ùå Num√©ro refus√© par AbstractAPI.");
                    return { valid: false, message: "‚ùå Num√©ro invalide ou inexistant." };
                }
            } catch (error) {
                console.error("‚ùå Erreur API AbstractAPI :", error);
                return { valid: false, message: "‚ö† Erreur de connexion √† AbstractAPI." };
            }
        }

        // Envoi d'un SMS avec un code de validation
        async function sendVerificationSMS(phoneNumber) {
            let verificationCode = Math.floor(100000 + Math.random() * 900000); // G√©n√©rer un code √† 6 chiffres
            window.verificationCode = verificationCode; // Stocker le code pour v√©rification

            let url = `https://api.smsprovider.com/send?api_key=${SMS_API_KEY}&to=${phoneNumber}&message=Votre code de validation: ${verificationCode}`;

            try {
                let response = await fetch(url);
                let data = await response.json();
                console.log("üì© SMS envoy√© :", data);

                if (data.success) {
                    alert("üì© Un code de validation a √©t√© envoy√© √† votre num√©ro !");
                    return true;
                } else {
                    alert("‚ùå Erreur : Impossible d'envoyer le SMS de validation.");
                    return false;
                }
            } catch (error) {
                console.error("‚ùå Erreur lors de l'envoi du SMS :", error);
                return false;
            }
        }

        // V√©rifier le code de validation entr√© par l'utilisateur
        function validateSMSCode() {
            let userCode = document.getElementById("sms-code").value;
            if (parseInt(userCode) === window.verificationCode) {
                alert("‚úÖ Code valid√© ! Vous pouvez finaliser votre inscription.");
                window.smsVerified = true; // Marquer le num√©ro comme valid√©
            } else {
                alert("‚ùå Code incorrect. Veuillez r√©essayer.");
            }
        }

        // Fonction testTelegram (envoi Telegram apr√®s double validation)
        window.testTelegram = async function () {
            let teamName = document.getElementById("team-name").value;
            let phoneNumber = document.getElementById("phone-number").value;
            let participants = document.getElementById("participants").value;

            if (!teamName || !phoneNumber || !participants) {
                alert("‚ùå Erreur : Remplissez tous les champs avant d'envoyer !");
                return;
            }

            // V√©rification format
            let validation = validatePhoneNumber(phoneNumber);
            if (!validation.valid) {
                alert(validation.message);
                return;
            }

            // V√©rification existence (API)
            let check = await checkPhoneNumberExists(phoneNumber);
            if (!check.valid) {
                alert(check.message);
                return;
            }

            // Envoi du SMS de validation
            let smsSent = await sendVerificationSMS(phoneNumber);
            if (!smsSent) {
                return;
            }

            // Attendre la validation du code
            let checkInterval = setInterval(() => {
                if (window.smsVerified) {
                    clearInterval(checkInterval);

                    let message = `üìå **Nouvelle Inscription !**\n\nüë• **√âquipe** : ${teamName}\nüìû **T√©l√©phone** : ${phoneNumber}\nüéüÔ∏è **Participants** : ${participants}`;

                    let url = `https://api.telegram.org/bot${window.env.VITE_TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${window.env.VITE_TELEGRAM_CHAT_ID}&text=${encodeURIComponent(message)}`;

                    console.log("üöÄ Tentative d'envoi Telegram :", url);

                    fetch(url)
                        .then(response => response.json())
                        .then(data => {
                            if (data.ok) {
                                alert("‚úÖ Inscription valid√©e et envoy√©e sur Telegram !");
                            } else {
                                console.error("‚ùå Erreur Telegram :", data);
                                alert("‚ùå Erreur : Impossible d'envoyer l'inscription sur Telegram.");
                            }
                        })
                        .catch(error => {
                            console.error("‚ùå Erreur r√©seau :", error);
                            alert("‚ùå Erreur : Probl√®me avec la connexion √† Telegram.");
                        });
                }
            }, 1000);
        };

        console.log("‚úÖ script.js est bien charg√© et ex√©cut√© !");
    })
    .catch(error => {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des variables d‚Äôenvironnement :", error);
    });


Laurie <writer.jd3f@gmail.com>
15:34 (il y a 0 minute)
√Ä moi

// R√©cup√©rer les variables d‚Äôenvironnement depuis Netlify
fetch("/.netlify/functions/env")
    .then(response => response.json())
    .then(env => {
        console.log("üì° Donn√©es re√ßues :", env); // Debug : voir les variables r√©cup√©r√©es

        if (!env || Object.keys(env).length === 0) {
            console.error("‚ùå Erreur : Les variables d'environnement sont vides !");
            return;
        }

        window.env = env; // Stocker les variables dans window.env

        let token = env.VITE_TELEGRAM_BOT_TOKEN || "NON D√âFINI";
        let chatId = env.VITE_TELEGRAM_CHAT_ID || "NON D√âFINI";
        let ABSTRACT_API_KEY = env.ABSTRACT_API_KEY || "NON D√âFINI";
        let SMS_API_KEY = env.SMS_API_KEY || "NON D√âFINI";

        console.log("üü¢ Token Telegram :", token);
        console.log("üü¢ Chat ID Telegram :", chatId);
        console.log("üü¢ Cl√© API AbstractAPI :", ABSTRACT_API_KEY);
        console.log("üü¢ Cl√© API SMS :", SMS_API_KEY);

        // Ajouter automatiquement +33 si l'utilisateur oublie le pr√©fixe
        document.getElementById("phone-number").addEventListener("input", function () {
            let phoneField = this;
            if (phoneField.value.length > 0 && !phoneField.value.startsWith("+")) {
                phoneField.value = "+33" + phoneField.value;
            }
        });

        // Fonction de validation du format du num√©ro de t√©l√©phone
        function validatePhoneNumber(phoneNumber) {
            let regex = /^\+?[1-9]\d{7,14}$/;
            if (!regex.test(phoneNumber)) {
                return { valid: false, message: "‚ùå Format de num√©ro invalide. Utilisez + suivi du code pays." };
            }
            return { valid: true, message: "‚úÖ Format valide" };
        }

        // V√©rification du num√©ro via AbstractAPI
        async function checkPhoneNumberExists(phoneNumber) {
            let url = `https://phonevalidation.abstractapi.com/v1/?api_key=${ABSTRACT_API_KEY}&phone=${phoneNumber}`;

            try {
                let response = await fetch(url);
                let data = await response.json();
                console.log("üìû R√©sultat API AbstractAPI :", data);

                if (data.valid) {
                    return { valid: true, message: "‚úÖ Num√©ro valide et existant." };
                } else {
                    return { valid: false, message: "‚ùå Num√©ro invalide ou inexistant." };
                }
            } catch (error) {
                console.error("‚ùå Erreur API AbstractAPI :", error);
                return { valid: false, message: "‚ö† Erreur de connexion √† AbstractAPI." };
            }
        }

        // Envoi d'un SMS avec un code de validation
        async function sendVerificationSMS(phoneNumber) {
            let verificationCode = Math.floor(100000 + Math.random() * 900000); // G√©n√©rer un code √† 6 chiffres
            window.verificationCode = verificationCode; // Stocker le code pour v√©rification

            let url = `https://api.smsprovider.com/send?api_key=${SMS_API_KEY}&to=${phoneNumber}&message=Votre code de validation: ${verificationCode}`;

            try {
                let response = await fetch(url);
                let data = await response.json();
                console.log("üì© SMS envoy√© :", data);

                if (data.success) {
                    alert("üì© Un code de validation a √©t√© envoy√© √† votre num√©ro !");
                    return true;
                } else {
                    alert("‚ùå Erreur : Impossible d'envoyer le SMS de validation.");
                    return false;
                }
            } catch (error) {
                console.error("‚ùå Erreur lors de l'envoi du SMS :", error);
                return false;
            }
        }

        // V√©rifier le code de validation entr√© par l'utilisateur
        function validateSMSCode() {
            let userCode = document.getElementById("sms-code").value;
            if (parseInt(userCode) === window.verificationCode) {
                alert("‚úÖ Code valid√© ! Vous pouvez finaliser votre inscription.");
                window.smsVerified = true; // Marquer le num√©ro comme valid√©
            } else {
                alert("‚ùå Code incorrect. Veuillez r√©essayer.");
            }
        }

        // Fonction testTelegram (envoi Telegram apr√®s double validation)
        window.testTelegram = async function () {
            let teamName = document.getElementById("team-name").value;
            let phoneNumber = document.getElementById("phone-number").value;
            let participants = document.getElementById("participants").value;

            if (!teamName || !phoneNumber || !participants) {
                alert("‚ùå Erreur : Remplissez tous les champs avant d'envoyer !");
                return;
            }

            // V√©rification format
            let validation = validatePhoneNumber(phoneNumber);
            if (!validation.valid) {
                alert(validation.message);
                return;
            }

            // V√©rification existence (API)
            let check = await checkPhoneNumberExists(phoneNumber);
            if (!check.valid) {
                alert(check.message);
                return;
            }

            // Envoi du SMS de validation
            let smsSent = await sendVerificationSMS(phoneNumber);
            if (!smsSent) {
                return;
            }

            // Attendre la validation du code
            let checkInterval = setInterval(() => {
                if (window.smsVerified) {
                    clearInterval(checkInterval);

                    let message = `üìå **Nouvelle Inscription !**\n\nüë• **√âquipe** : ${teamName}\nüìû **T√©l√©phone** : ${phoneNumber}\nüéüÔ∏è **Participants** : ${participants}`;

                    let url = `https://api.telegram.org/bot${window.env.VITE_TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${window.env.VITE_TELEGRAM_CHAT_ID}&text=${encodeURIComponent(message)}`;

                    console.log("üöÄ Tentative d'envoi Telegram :", url);

                    fetch(url)
                        .then(response => response.json())
                        .then(data => {
                            if (data.ok) {
                                alert("‚úÖ Inscription valid√©e et envoy√©e sur Telegram !");
                            } else {
                                console.error("‚ùå Erreur Telegram :", data);
                                alert("‚ùå Erreur : Impossible d'envoyer l'inscription sur Telegram.");
                            }
                        })
                        .catch(error => {
                            console.error("‚ùå Erreur r√©seau :", error);
                            alert("‚ùå Erreur : Probl√®me avec la connexion √† Telegram.");
                        });
                }
            }, 1000);
        };

        console.log("‚úÖ script.js est bien charg√© et ex√©cut√© !");
    })
    .catch(error => {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des variables d‚Äôenvironnement :", error);
    });